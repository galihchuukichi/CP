#include <iostream>
#include <vector>
using namespace std;

// Fungsi untuk membangun pohon segmen
void buildSegmentTree(
    vector<int>& segmentTree, 
    const vector<int>& arr, 
    int node, int start, int end) {
        
    if (start == end) {
        segmentTree[node] = arr[start];
    } else {
        int mid = (start + end) / 2;
        
        //Membangun anak kiri
        buildSegmentTree(segmentTree,
        arr, 2 * node + 1, start, mid);
        
        //Membangun anak kanan
        buildSegmentTree(segmentTree,
        arr, 2 * node + 2, mid + 1, end); 
        
        // Menggabungkan informasi dari anak-anak
        segmentTree[node] = segmentTree[2 * node + 1] + segmentTree[2 * node + 2];   
    }
}

// Fungsi untuk melakukan query pada pohon segmen
int querySegmentTree(   const vector<int>& segmentTree, 
                        int node, int start, int end, int qStart, int qEnd) {
        
    if (qStart > end || qEnd < start) {
        return 0;   // Jika rentang query berada di luar rentang pohon segmen saat ini
    } else if (qStart <= start && qEnd >= end) {
        return segmentTree[node];   // Jika rentang query sepenuhnya mencakup rentang pohon segmen saat ini
    } else {
        int mid = (start + end) / 2;
        int leftSum = querySegmentTree(segmentTree, 2 * node + 1, start, mid, qStart, qEnd);     // Query pada anak kiri
        int rightSum = querySegmentTree(segmentTree, 2 * node + 2, mid + 1, end, qStart, qEnd);   // Query pada anak kanan
        return leftSum + rightSum;   // Menggabungkan hasil query anak-anak
    }
}

// Fungsi untuk memperbarui elemen dalam pohon segmen
void updateSegmentTree( vector<int>& segmentTree, 
                        int node, int start, int end, int idx, int newValue) {
    if (start == end) {
        segmentTree[node] = newValue;
    } else {
        int mid = (start + end) / 2;
        if (idx >= start && idx <= mid) {
            // Perbarui anak kiri
            updateSegmentTree(segmentTree, 2 * node + 1, start, mid, idx, newValue);    
        } else {
            // Perbarui anak kanan
            updateSegmentTree(segmentTree, 2 * node + 2, mid + 1, end, idx, newValue);  
        }
        // Menggabungkan informasi dari anak-anak
        segmentTree[node] = segmentTree[2 * node + 1] + segmentTree[2 * node + 2];   
    }
}

int main() {
    vector<int> arr = {1, 3, 5, 7, 9, 11};
    int n = arr.size();

    // Menghitung ukuran pohon segmen
    int segmentTreeSize = 2 * n - 1;
    vector<int> segmentTree(segmentTreeSize, 0);

    // Membangun pohon segmen
    buildSegmentTree(segmentTree, arr, 0, 0, n - 1);

    // Contoh penggunaan fungsi querySegmentTree
    int queryStart = 1;
    int queryEnd = 4;
    int sumInRange = querySegmentTree(segmentTree, 0, 0, n - 1, queryStart, queryEnd);
    cout << "Jumlah dalam rentang [" << queryStart << ", " << queryEnd << "] adalah " << sumInRange << endl;

    // Contoh penggunaan fungsi updateSegmentTree
    int updateIndex = 2;
    int newValue = 6;
    arr[updateIndex] = newValue;
    updateSegmentTree(segmentTree, 0, 0, n - 1, updateIndex, newValue);
    cout << "Elemen pada indeks " << updateIndex << " telah diperbarui menjadi " << newValue << endl;

    // Menghitung ulang jumlah dalam rentang setelah pembaruan
    sumInRange = querySegmentTree(segmentTree, 0, 0, n - 1, queryStart, queryEnd);
    cout << "Jumlah dalam rentang [" << queryStart << ", " << queryEnd << "] setelah pembaruan adalah " << sumInRange << endl;

    return 0;
}
