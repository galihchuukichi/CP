/*
// ################################################## P_Q VECTOR && DEQUE && ARRAY ##################################################
dqll(myV,mySize);
myV.reverse(v.begin(),v.end());

myV = {1,2,3,4,5}
myV.insert(myV.begin()+2,100);
myV = {1,2,100,3,4,5}

reverse(myV.begin(),myV.begin()+3); // asal : 1 2 3 4 5
myV = {3, 2, 1, 4, 5}

myV = {1,2,3,4,5};
myV.erase(myV.begin()+1,myV.begin()+4);
myV = {1,5}

DEQUE ga bisa “myDq(5) = {1,2,3,4,5};
Array JAUH LEBIH EFISIEN dibandingkan DEQUE dalam hal TIME COMPLEXITY & MEMORY

void myF(vll& arr){} // harus pake & supaya nilainya juga berubah
void printArray(int arr[], int size){} //without using ‘&’ langsung disimpen address nya jadinya langsung ganti

Memset ga bisa dipake di vector
Pake myVec.clear(); // ini mereset jadi size 0

swap(a,b); // tuker nilai, bisa juga untuk array

vector<vll> DP(505,vll(505,-1));
//creates 2D vector with 505 x 505 size and initialized all element with -1

vi A = {1,2,3,4,5};
A.erase(A.begin()+2);
A = {1,2,4,5};

// Resize the vector to have 3 rows and 4 columns
  vec2d.resize(3, std::vector<int>(4));

vector<vector<int>> adj(5);
Deque;
Can access using [], deq.front(), deq.back(), deq.pop_back(), deq.pop_front();

adj[4].pb(1);

std::priority_queue<int, std::vector<int>, std::greater<int>> pq;

mySet.insert(); mySet.erase(val); mySet.size();
vector<set<ll>>v;
auto it = v[i].lower_bound(a); // MOST FASTER
// ################################################## TUPLE ##################################################
tuple<int, string, bool> myTuple(42, "hello", true);
deque<tuple<ll,bool,string>> myDt;
myDt.pb(23,1,”halo”);
    cout << get<0>(myTuple) << endl;   // output: 42
    cout << get<1>(myTuple) << endl;   // output: hello
    cout << get<2>(myTuple) << endl;   // output: 1 (true)
    
    

// ################################################## FUNGSI ##################################################
void fungsi(int* arr){}; // simpen alamat
myInput.clear(); // 80% NOT EFFICIENT

void myF(vll& arr){} // harus pake & supaya nilainya juga berubah

lower_bound >= x
upper_bound > x

auto it = lower_bound(v.begin(),v.end(),3)
it == v.end() GA NEMU
index = it-v.begin()+1 | value = *it

LLONG_MAX | INT_MAX

    int a = 5;
    int b = 2;
    int ans = ceil(static_cast<double>(a) / b);
    cout << ans;  // Output: 3

// SUBSTR
// format myStr.substr(idx,length);
string s = "Hello, World!";
            0123456789012
string sub1 = s.substr(7); // World 
string sub2 = s.substr(0, 5); // Hello

// SORT STRING BY SIZE | SHORT -> LONG
bool compareBySize(const std::string& a, const std::string& b) {
    return a.size() < b.size();
}
vector<string> strings = { "a", "ab", "b" };
sort(strings.begin(), strings.end(), compareBySize);
atau bisa juga
sort(strings.begin(), strings.end(), [](const std::string& a, const std::string& b) {return a.size() < b.size(); });

// SORTING MAP
map<char,ll>mp;
map<char,ll>mySortedMap(mp.begin(),mp.end());

// FUNGSI LAMBDA
void solve(int dep){
    ll a,b;
    cin>>a>>b;
    ll d = gcd(a,b);
    auto p = [](ll x, ll y) -> ll{
        ll r = 0;
        while(x>1){
            if(x%y)
                return -1;
            x/=y;
            r++;
        }
        return r;
    };
    
    ll x = p(a/d,3), y = p(b/d,2);
    
    cout<<x<<" "<<y<<endl;
    if(x != -1 && y != -1 && x>=y)
        asd("YES");
    else
        asd("NO");
}

// LOWER BOUND / LOWER_BOUND vector<pair<ll,ll>>v; vector<pll> v;
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::pair<int, int>> vec = {{1, 10}, {2, 20}, {3, 30}, {4, 40}, {5, 50}};

    int key = 3; // Kunci yang dicari

    // Mengurutkan vector berdasarkan kunci
    std::sort(vec.begin(), vec.end());

    // Mencari lower bound menggunakan binary search
    auto it = std::lower_bound(vec.begin(), vec.end(), std::make_pair(key, 0));

    if (it != vec.end() && it->first == key) {
        // Elemen dengan kunci ditemukan
        std::cout << "Elemen dengan kunci " << key << " ditemukan pada indeks " << it - vec.begin() << std::endl;
    } else {
        // Elemen dengan kunci tidak ditemukan
        std::cout << "Elemen dengan kunci " << key << " tidak ditemukan." << std::endl;
    }

    return 0;
}




// ################################################## ERROR ##################################################
for(ll i=0; i<=cari.size()-1; i++) cout<<i<<" "; // INI RTE
for(ll i=0; i<=-1; i++) cout<<i<<” “; // INI AMAN

unordered_set<pair<ll,ll>>mySetPair; // INI ERROR
set<pair<ll,ll>>mySet; // INI AMAN

map<int,pair<int,int>>mp;
if(mp[5].emtpy()) // ERROR
if(mp.find(5) == mp.end()) // USE THIS, DONT WORRY IT'S O(log n) :)

// push back vector<pll>v
vector<pll>v; v.pb({bedH,bedM}); // INI EROR
v.pb(bedH,bedM); // INI AMAN

// FUNGSI LAMBDA ERROR (INT)
// ### DI BAWAH ERROR
 auto p = [](ll x, ll y){
        ll r = 0;
        while(x>1){
            if(x%y)
                return -1;
            x/=y;
            r++;
        }
        return r;
    };
// ### DI BAWAH WORKS
 auto p = [](ll x, ll y) -> ll{
        ll r = 0;
        while(x>1){
            if(x%y)
                return -1;
            x/=y;
            r++;
        }
        return r;
    };

// PRIORITY_QUEUE clear function
priority_queue<ll>pq; 
pq.clear(); // ERROR
pqll empPq;
swap(empPq,pq); // USE THIS INSTEAD

// ################################################## WRONG ANSWER ##################################################

// WHEN CEILING, MAKE SURE IT IS IN LONG DOUBLE, NOT IN INTEGER/LONG LONG
ll ans = ceil(5/2); // ans = 2;
ll ans = ceil(5.0L / 2.0L); // ans = 3;


// double is not enough when ceil or floor with really big decimal number, use long double
long double a = 5;
if(a < 10.0L) // 10.0L in long double
  asd("YES");

// ONLY APPLIED FOR QUEUE, IF IT'S EMPTY THEN THE FRONT EQUAL TO 0
// myQueue.empty() -> myQueue.front()==0

// ################################################## FASTEST TRIKCS ##################################################

priority_queue<ll>myPq; // there is no myPq.clear(); 
// USE BELOW INSTEAD !
priority_queue<ll>empPq;
swap(myPq,empPq);

